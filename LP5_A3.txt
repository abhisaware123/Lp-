----------avg.cu-----------

#include <stdio.h>
#include <omp.h>

int main() {
    int i, sum = 0, local_sum = 0;
    double avg;
    omp_set_num_threads(4);
#pragma omp parallel private(i) reduction(+:local_sum)
    {
#pragma omp for
        for (i = 1; i <= 100; i++) {
            local_sum += i;
        }
    }
    sum = local_sum;  // aggregate the local sums from each thread
    avg = (double)sum / 100;
    printf("Average value is %f\n", avg);
    return 0;
}


----------max.cu-----------

#include <stdio.h>
#include <omp.h>

int main() {
    int i, max_val = -1000;
    omp_set_num_threads(4);
    int local_max_val = max_val;  // move the reduction variable declaration outside
#pragma omp parallel
    {
#pragma omp for reduction(max:local_max_val)
        for (i = 1; i <= 100; i++) {
            if (i > local_max_val) {
                local_max_val = i;
            }
        }
#pragma omp critical
        {
            if (local_max_val > max_val) {
                max_val = local_max_val;
            }
        }
    }
    printf("Maximum value is %d\n", max_val);
    return 0;
}




----------min.cu-----------


#include <stdio.h>
#include <omp.h>

int main() {
    int i, min_val = 1000;
    omp_set_num_threads(4);
    int local_min_val = min_val;

    #pragma omp parallel shared(min_val)
    {
        

        #pragma omp for reduction(min:local_min_val)
        for (i = 1; i <= 100; i++) {
            if (i < local_min_val) {
                local_min_val = i;
            }
        }

        #pragma omp critical
        {
            if (local_min_val < min_val) {
                min_val = local_min_val;
            }
        }
    }

    printf("Minimum value is %d\n", min_val);
    return 0;
}



----------sum.cu-----------


#include <stdio.h>
#include <omp.h>

int main() {
    int i, sum = 0;
    omp_set_num_threads(4);
#pragma omp parallel
    {
#pragma omp for reduction(+:sum)
        for (i = 1; i <= 100; i++) {
            sum += i;
        }
    }
    printf("Sum = %d\n", sum);
    return 0;
}
